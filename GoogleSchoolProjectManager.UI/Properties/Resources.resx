<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="APP_GoogleDriveFolderFileList" xml:space="preserve">
    <value>Folders/files on Google Drive</value>
    <comment>Header of groupbox for selecting folder/file from list of google drive</comment>
  </data>
  <data name="APP_MENU_Exit" xml:space="preserve">
    <value>_Exit</value>
    <comment>Submenu button, Exit</comment>
  </data>
  <data name="APP_MENU_File" xml:space="preserve">
    <value>_File</value>
    <comment>Main menu button, File</comment>
  </data>
  <data name="APP_Title" xml:space="preserve">
    <value>App Title</value>
    <comment>Application title</comment>
  </data>
  <data name="CMD_GenerateFilesFromTemplate" xml:space="preserve">
    <value>Generate files from template</value>
    <comment>Label on button to generate files from template</comment>
  </data>
  <data name="CMD_GetFolderTree" xml:space="preserve">
    <value>Refresh</value>
    <comment>Command button, for downloading tree list</comment>
  </data>
  <data name="CMD_SelectFileNamesSource" xml:space="preserve">
    <value>Select names for new files</value>
    <comment>Label on button to select names for new files</comment>
  </data>
  <data name="CMD_SelectFileTemplateSource" xml:space="preserve">
    <value>Select template file</value>
    <comment>Label on button to select template file</comment>
  </data>
  <data name="CMD_SelectFolder" xml:space="preserve">
    <value>Select folder</value>
  </data>
  <data name="DatePicker_KHS_Label_SelectDateFrom" xml:space="preserve">
    <value>From:</value>
    <comment>Label on DateTimePicker for KHS update, FROM:</comment>
  </data>
  <data name="DatePicker_KHS_Label_SelectDateTo" xml:space="preserve">
    <value>To:</value>
    <comment>Label on DateTimePicker for KHS update, TO:</comment>
  </data>
  <data name="DatePicker_KHS_SelectDateFrom" xml:space="preserve">
    <value>Select week from date</value>
    <comment>Selection of day when week starts</comment>
  </data>
  <data name="DatePicker_KHS_SelectDateTo" xml:space="preserve">
    <value>Select week to date</value>
    <comment>Selection of day when week ends</comment>
  </data>
  <data name="DIALOG_CMDGetFolderTree_PROGRESS_Message" xml:space="preserve">
    <value>Contacting server, downloading folders, initializing list.</value>
    <comment>Messsage of dialog, that appears when user tries to get list of all folders/files at google drive</comment>
  </data>
  <data name="DIALOG_CMDGetFolderTree_PROGRESS_Title" xml:space="preserve">
    <value>Download in progress</value>
    <comment>Title of dialog, that appears when user tries to get list of all folders/files at google drive</comment>
  </data>
  <data name="DIALOG_CMD_GenerateFilesFromTemplate_PROGRESS_Message" xml:space="preserve">
    <value>Currently generating ({0} of {1}): {2}</value>
    <comment>Message of dialog taht appears when fiels are being created</comment>
  </data>
  <data name="DIALOG_CMD_GenerateFilesFromTemplate_PROGRESS_Message_Before" xml:space="preserve">
    <value>Preparing generating &amp; contacting server</value>
  </data>
  <data name="DIALOG_CMD_GenerateFilesFromTemplate_PROGRESS_Title" xml:space="preserve">
    <value>Generating files from template</value>
    <comment>Title of dialog that appears when files are being created</comment>
  </data>
  <data name="DIALOG_SelectItemFromTree_Title" xml:space="preserve">
    <value>SELECT FILE/FOLDER</value>
  </data>
  <data name="GROUP_HEADER_FileNamesResult" xml:space="preserve">
    <value>Result list of file names with pre/postfix</value>
    <comment>Groupbox header: Result list of file names with pre/postfix</comment>
  </data>
  <data name="GROUP_HEADER_FileNamesSource" xml:space="preserve">
    <value>Name of files splitted by new line/quotta/separators</value>
    <comment>Groupbox header: Name of files splitted by new line/quotta/separators</comment>
  </data>
  <data name="GROUP_HEADER_GeneratingFiles" xml:space="preserve">
    <value>Generating files</value>
    <comment>Groupbox header: Generating files</comment>
  </data>
  <data name="GROUP_HEADER_KHSUpdate" xml:space="preserve">
    <value>KHS Update</value>
    <comment>GRoupbox header: KHS update</comment>
  </data>
  <data name="GROUP_HEADER_SubjectsAndGoals" xml:space="preserve">
    <value>Subjects and Goals</value>
    <comment>Groupbox header: Subjects and goals</comment>
  </data>
  <data name="KHSRequest_Label_Goal" xml:space="preserve">
    <value>Goal:</value>
    <comment>Label for entering goal</comment>
  </data>
  <data name="KHSRequest_Label_Subject" xml:space="preserve">
    <value>Subject:</value>
    <comment>Label for entering subject</comment>
  </data>
  <data name="Label_NameOfFile" xml:space="preserve">
    <value>&lt;NameOfFile&gt;</value>
    <comment>Label that stands between prefix/postfix to show off (like &lt;NameOfFile&gt;</comment>
  </data>
</root>